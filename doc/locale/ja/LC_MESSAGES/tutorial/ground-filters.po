# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../tutorial/ground-filters.rst:5
msgid "Ground Filter Tutorial"
msgstr ""

#: ../../tutorial/ground-filters.rst
msgid "Author"
msgstr ""

#: ../../tutorial/ground-filters.rst:7
msgid "Bradley Chambers"
msgstr ""

#: ../../tutorial/ground-filters.rst
msgid "Contact"
msgstr ""

#: ../../tutorial/ground-filters.rst:8
msgid "brad.chambers@gmail.com"
msgstr ""

#: ../../tutorial/ground-filters.rst
msgid "Date"
msgstr ""

#: ../../tutorial/ground-filters.rst:9
msgid "04/17/2017"
msgstr ""

#: ../../tutorial/ground-filters.rst:12
msgid "Background"
msgstr ""

#: ../../tutorial/ground-filters.rst:14
msgid ""
"In previous tutorials we introduced our implementation of the "
":ref:`Progressive Morphological Filter (PMF) <filters.pmf>`, a "
":ref:`ground kernel <ground_command>` to simplify command-line access to "
"PMF, and a filter for :ref:`removing outliers <filters.outlier>`."
msgstr ""

#: ../../tutorial/ground-filters.rst:19
msgid ""
"This tutorial will highlight some recent enhancements to the PDAL "
"library, in the context of a ground segmentation workflow. Specifically, "
"we will discuss:"
msgstr ""

#: ../../tutorial/ground-filters.rst:22
msgid "Constructing and executing a \"filters-only\" pipeline"
msgstr ""

#: ../../tutorial/ground-filters.rst:23
msgid "Resetting existing classifications prior to processing"
msgstr ""

#: ../../tutorial/ground-filters.rst:24
msgid "Using Extended Local Minimum (ELM) to identify low outliers"
msgstr ""

#: ../../tutorial/ground-filters.rst:25
msgid "Using Simple Morphological Filter (SMRF) as an alternative to PMF"
msgstr ""

#: ../../tutorial/ground-filters.rst:26
msgid "Ignoring outliers during ground segmentation"
msgstr ""

#: ../../tutorial/ground-filters.rst:27
msgid "Considering only last returns during ground segmentation"
msgstr ""

#: ../../tutorial/ground-filters.rst:28
msgid "Extracting ground returns as a post-processing step"
msgstr ""

#: ../../tutorial/ground-filters.rst:32
msgid ""
"The pipeline discussed in this tutorial requires `PDAL v1.5 "
"<https://github.com/PDAL/PDAL/releases/tag/1.5.0>`_."
msgstr ""

#: ../../tutorial/ground-filters.rst:36
msgid "The Pipeline"
msgstr ""

#: ../../tutorial/ground-filters.rst:38
msgid ""
"Begin by creating a new file called ``pipeline.json`` with the following "
"contents."
msgstr ""

#: ../../tutorial/ground-filters.rst:47
msgid ""
"For users familiar with PDAL pipelines, this example may seem to be "
"missing a couple of very important stages, namely the reader and writer! "
"A new feature of PDAL is the ability to provide a PDAL pipeline with no "
"reader or writer stages to the :ref:`translate_command` command. The "
"input and output filenames can be specified on the command line and will "
"be automatically inserted into the pipeline by the application."
msgstr ""

#: ../../tutorial/ground-filters.rst:55
msgid "The Explanation"
msgstr ""

#: ../../tutorial/ground-filters.rst:57
msgid "We continue by explaining the various stages of the pipeline in order."
msgstr ""

#: ../../tutorial/ground-filters.rst:60
msgid "Reprojecting Data"
msgstr ""

#: ../../tutorial/ground-filters.rst:62
msgid ""
"Many of PDAL's default parameters are specified in meters, and individual"
" filter stages typically assume that units are at least uniform in X, Y, "
"and Z. Because data will not always be provided in this way, PDAL "
"pipelines should account for any data reprojections and parameter scaling"
" that are required from one dataset to the next."
msgstr ""

#: ../../tutorial/ground-filters.rst:73
msgid ""
"In this example, we show data being reprojected to ``EPSG:32632`` with X,"
" Y, and Z in meters."
msgstr ""

#: ../../tutorial/ground-filters.rst:77
msgid "Assigning Classification Values"
msgstr ""

#: ../../tutorial/ground-filters.rst:79
msgid ""
"Let's assume that you have been given an LAS file that contains per point"
" classifications, but you'd like to start with a clean slate and derive "
"your own classifications with your PDAL pipeline."
msgstr ""

#: ../../tutorial/ground-filters.rst:83
msgid ""
"PDAL's :ref:`assign filter <filters.assign>` has been added to assign "
"values to a given dimension. In our example, a single option has been "
"provided that specifies the dimension, range, and value to assign. In "
"this case, we are stating that we would like to apply a value of 0 to the"
" ``Classification`` dimension for every point."
msgstr ""

#: ../../tutorial/ground-filters.rst:96
msgid ""
"Previously, you could do the same thing (with a slightly different "
"syntax) using ``filters.attribute``, but this filter has been deprecated "
"and split into :ref:`filters.assign` and :ref:`filters.overlay`."
msgstr ""

#: ../../tutorial/ground-filters.rst:101
msgid "Extended Local Minimum"
msgstr ""

#: ../../tutorial/ground-filters.rst:103
msgid ""
"The :ref:`Extended Local Minimum (ELM) method <filters.elm>` helps to "
"identify low noise points that can adversely affect ground segmentation "
"algorithms. ELM was first published in [Chen2012]_ as part of the upward-"
"fusion method of DTM generation. Noise points are **classified** with a "
"value of ``7`` in keeping with the LAS specification."
msgstr ""

#: ../../tutorial/ground-filters.rst:115
msgid "Outliers"
msgstr ""

#: ../../tutorial/ground-filters.rst:117
msgid ""
"PDAL's :ref:`outlier filter <filters.outlier>` provides two methods of "
"outlier detection at the moment: ``radius`` and ``statistical``. Both aim"
" to identify points that are isolated and likely arise from noise "
"sources. Noise points are **classified** with a value of ``7`` in keeping"
" with the LAS specification."
msgstr ""

#: ../../tutorial/ground-filters.rst:128
msgid "Ground Segmentation"
msgstr ""

#: ../../tutorial/ground-filters.rst:130
msgid ""
"The :ref:`Simple Morphological Filter (SMRF) <filters.smrf>` "
"[Pingel2013]_ is a newer addition to PDAL that has quietly existed in an "
"alpha state since v1.3. With the release of PDAL v1.5, our SMRF "
"implementation is much more complete, although it only implements nearest"
" neighbor void filling and not the authors' preferred \"Springs\" "
"algorithm."
msgstr ""

#: ../../tutorial/ground-filters.rst:136
msgid ""
"The changes to SMRF between PDAL v1.3 and v1.5 are substantial. The "
"original version had actually drifted quite far from the authors' "
"published approach, namely in the area of filling voids. We have reverted"
" the code to match the published work, but for now are only using the "
"nearest neighbors approach to filling voids. The morphological operations"
" are also accelerated by moving to an iterative approach and using a "
"diamond structuring element."
msgstr ""

#: ../../tutorial/ground-filters.rst:148
msgid ""
"In addition to specifying some of the SMRF-specific arguments, our "
"example also demonstrates the use of two optional pre-filtering "
"capabilities: ``ignore`` and ``last``."
msgstr ""

#: ../../tutorial/ground-filters.rst:152
msgid ""
"The ``ignore`` option accepts a :ref:`range <ranges>`, here indicating "
"that we have points marked as noise (i.e., ``Classification`` of 7) that "
"should be excluded from ground segmentation, but are kept as part of the "
"output dataset."
msgstr ""

#: ../../tutorial/ground-filters.rst:156
msgid ""
"The ``last`` option, when set to ``true`` indicates that we would like to"
" only consider last returns for ground segmentation when return "
"information is available. Again, returns that are not \"last returns\" "
"are still retained in the output dataset - they are simply ignored for "
"the purposes of ground segmentation."
msgstr ""

#: ../../tutorial/ground-filters.rst:164
msgid ""
"Many lidar systems provide return information. This includes the number "
"of returns per pulse and the order of a particular return within the "
"pulse. Where the return number and number of returns are equal, we call "
"this a last return."
msgstr ""

#: ../../tutorial/ground-filters.rst:169
msgid ""
"Last returns are not by definition ground returns. In fact, the first and"
" only return from surfaces such as rooftops will also be last returns, "
"and last returns within dense foliage may not ever make it all the way to"
" ground. Still, whenever there are multiple returns within a pulse, it "
"stands to reason that anything before the last return would not be from "
"the ground."
msgstr ""

#: ../../tutorial/ground-filters.rst:175
msgid ""
"Some bare earth algorithms explicitly operate on last returns only. In "
"this case, this logic will presumably be implemented within the filter "
"stage itself. That being said, it stands to reason that any ground "
"segmentation approach could be improved by excluding all returns but the "
"so-called last returns. Neither PMF nor SMRF make this assertion, but our"
" implementations still consider only last returns by default. This "
"behavior can be changed by setting ``last=false``."
msgstr ""

#: ../../tutorial/ground-filters.rst:183
msgid ""
"For an example of how to filter on last returns outside the context of "
"SMRF and PMF, see `this "
"<https://github.com/PDAL/PDAL/blob/master/test/data/pipeline/predicate-"
"keep-last-return.json.in>`_ within PDAL's source tree."
msgstr ""

#: ../../tutorial/ground-filters.rst:190
msgid ""
"SMRF is not intended to be a replacement for the :ref:`Progressive "
"Morphological Filter (PMF) <filters.pmf>` [Zhang2003]_. Rather, it is "
"offered as an alternative. PMF has been a part of PDAL since v1.0, first "
"as part of the PCL plugin and now as ``filters.pmf``. Since PDAL v1.4, we"
" have fixed a number of bugs, and have accelerated the approximate mode "
"by implementing iterative morphological operations and using a diamond "
"structuring element."
msgstr ""

#: ../../tutorial/ground-filters.rst:199
msgid "Extracting Ground Returns"
msgstr ""

#: ../../tutorial/ground-filters.rst:201
msgid ""
"Any time we have points classified as ground, we may wish to extract just"
" these points, e.g., to create a *digital terrain model* (DTM). In this "
"case, we use a :ref:`range filter <filters.range>` as shown."
msgstr ""

#: ../../tutorial/ground-filters.rst:211
msgid ""
"The :ref:`range filter <filters.range>` accepts a ``limits`` option that "
"identifies the dimension(s) on which to filter and the :ref:`range "
"<ranges>` of values to passthrough. In this case, we are indicating that "
"the filter should only pass points whose ``Classification`` value is "
"equal to 2."
msgstr ""

#: ../../tutorial/ground-filters.rst:218
msgid ""
"The default behavior of both :ref:`PMF <filters.pmf>` and :ref:`SMRF "
"<filters.smrf>` is to classify points, which has not changed from "
"previous versions of PDAL. The ``extract`` and ``classify`` options have "
"been removed in PDAL v1.5. These filters now **only** classify points, "
"such that ground points can be identified and filtered downstream, as we "
"have shown with the range filter above."
msgstr ""

#: ../../tutorial/ground-filters.rst:226
msgid "Running the Pipeline"
msgstr ""

#: ../../tutorial/ground-filters.rst:228
msgid ""
"Now let's run our ``pipeline.json`` example, using it to "
":ref:`translate_command` ``input.las`` to ``output.las``."
msgstr ""


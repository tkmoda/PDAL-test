# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../tutorial/las.rst:4
msgid "LAS Reading and Writing with PDAL"
msgstr ""

#: ../../tutorial/las.rst
msgid "Author"
msgstr ""

#: ../../tutorial/las.rst:8
msgid "Howard Butler"
msgstr ""

#: ../../tutorial/las.rst
msgid "Contact"
msgstr ""

#: ../../tutorial/las.rst:9
msgid "howard@hobu.co"
msgstr ""

#: ../../tutorial/las.rst
msgid "Date"
msgstr ""

#: ../../tutorial/las.rst:10
msgid "3/27/2017"
msgstr ""

#: ../../tutorial/las.rst:14
msgid "Table of Contents"
msgstr ""

#: ../../tutorial/las.rst:16
msgid ""
"This tutorial will describe reading and writing |ASPRSLAS| data with "
"PDAL, discuss the capabilities that PDAL :ref:`readers.las` and "
":ref:`writers.las` can provide for this format."
msgstr ""

#: ../../tutorial/las.rst:21
msgid "Introduction"
msgstr ""

#: ../../tutorial/las.rst:23
msgid ""
"|ASPRSLAS| is probably the most commonly used |LiDAR| format, and PDAL's "
"support of LAS is important for many users of the library. This tutorial "
"describes and demonstrates some of the capabilities the drivers provide, "
"points out items to be aware of when using the drivers, and hopefully "
"provides some examples you can use to get what you need out of the LAS "
"drivers."
msgstr ""

#: ../../tutorial/las.rst:31
msgid "LAS Versions"
msgstr ""

#: ../../tutorial/las.rst:33
msgid ""
"There are five LAS versions -- 1.0 to 1.4. Each iteration added some "
"complexity to the format in terms of capabilities it supports, possible "
"data types it stores, and metadata. Users of LAS must balance the "
"features they need with the use of the data by downstream applications. "
"While LAS support in some form is quite widespread throughout the "
"industry, most applications do not support every feature of each version."
"  PDAL works to provide many of these features, but it is also "
"incomplete.  Specifically, PDAL doesn't support point formats that store "
"waveform data."
msgstr ""

#: ../../tutorial/las.rst:43
msgid "Version Example"
msgstr ""

#: ../../tutorial/las.rst:45
msgid ""
"We can use the ``minor_version`` option of :ref:`writers.las` to set the "
"version PDAL should output. The following example will write a 1.1 "
"version LAS file. Depending on the features you need, this may or may not"
" be what you want."
msgstr ""

#: ../../tutorial/las.rst:67
msgid ""
"PDAL defaults to writing a LAS 1.2 version if no ``minor_version`` is "
"specified or the ``forward`` option of :ref:`writers.las` is not used to "
"carry along a version from a previously read file."
msgstr ""

#: ../../tutorial/las.rst:74
msgid "Spatial Reference System"
msgstr ""

#: ../../tutorial/las.rst:76
msgid ""
"LAS 1.0 to 1.3 use |GeoTIFF| keys for storing coordinate system "
"information, while LAS 1.4 uses |WellKnownText|. GeoTIFF is well-"
"supported by most software that read LAS, but it is not possible to "
"express some coordinate system specifics with GeoTIFF. WKT is supports "
"more coordinate systems than GeoTIFF, but vendor-specific and later "
"versions (WKT 2) may not be handled well."
msgstr ""

#: ../../tutorial/las.rst:85
msgid "Assignment Example"
msgstr ""

#: ../../tutorial/las.rst:87
msgid ""
"The PDAL :ref:`writers.las` allows you to override or assign the "
"coordinate system to an explicit value if you need. Often the coordinate "
"system defined by a file might be incorrect or non-existent, and you can "
"set this with PDAL."
msgstr ""

#: ../../tutorial/las.rst:91
msgid ""
"The following example sets the ``a_srs`` option of the :ref:`writers.las`"
" to ``EPSG:4326``."
msgstr ""

#: ../../tutorial/las.rst:112
msgid ""
"Remember to set ``offset_x``, ``offset_y``, ``scale_x``, and ``scale_y`` "
"values to something appropriate if your are storing decimal degree data "
"in LAS files. The special value ``auto`` can be used for the offset "
"values, but you should set an explicit value for the scale values to "
"prevent overdriving the precision of the data and disrupting "
"`Compression`_ with |LASzip|."
msgstr ""

#: ../../tutorial/las.rst:120
msgid "Vertical Datum Example"
msgstr ""

#: ../../tutorial/las.rst:122
msgid ""
"Vertical coordinate control is important in |LiDAR| and PDAL supports "
"assignment and reprojection/transform of vertical coordinates using "
"|Proj.4| and |GDAL|. The coordinate system description magic happens in "
"GDAL, and you assign a compound coordinate system (both vertical and "
"horizontal definitions) using the following syntax:"
msgstr ""

#: ../../tutorial/las.rst:133
msgid ""
"This assignment states typical 4326 horizontal coordinate system plus a "
"vertical one that represents `EGM08`_. In |WellKnownText|, this "
"coordinate system is described by:"
msgstr ""

#: ../../tutorial/las.rst:164
msgid ""
"As in `Assignment Example`_, it is common to need to reassign the "
"coordinate system. The following example defines both the horizontal and "
"vertical coordinate system for a file to `UTM Zone 15N NAD83`_ for "
"horizontal and `NAVD88`_ for the vertical."
msgstr ""

#: ../../tutorial/las.rst:190
msgid ""
"Any coordinate system description format supported by GDAL's "
"`SetFromUserInput`_ method can be used to assign or set the coordinate "
"system in PDAL. This includes WKT, |Proj.4| definitions, or OGC URNs. It "
"is your responsibility, however, to escape or massage any input data to "
"make it be valid JSON."
msgstr ""

#: ../../tutorial/las.rst:201
msgid "Reprojection Example"
msgstr ""

#: ../../tutorial/las.rst:203
msgid ""
"A common desire is to transform the coordinates of an |ASPRSLAS| file "
"from one coordinate system to another. The mechanism to do that with PDAL"
" is :ref:`filters.reprojection`."
msgstr ""

#: ../../tutorial/las.rst:229
msgid ""
"If the input data doesn't specify a projection, you must specify the "
"``in_srs`` option of :ref:`filters.reprojection`.  ``in_srs`` can also be"
" used to override an existing spatial reference attached to the input "
"point set."
msgstr ""

#: ../../tutorial/las.rst:236
msgid "Point Formats"
msgstr ""

#: ../../tutorial/las.rst:238
msgid ""
"As each revision of LAS was released, more point formats were added. A "
"point format is the fixed set of :ref:`dimensions <dimensions>` that a "
"LAS file stores for each point in the file.  For any point format, the "
"size and composition of dimensions is consistent across versions, but "
"users should be aware of some minor interpretation changes based on LAS "
"file version.  For example, a classification value of 11 in version 1.4 "
"indicates \"Road Surface\", while that value is reserved in version 1.1."
msgstr ""

#: ../../tutorial/las.rst:249
msgid "Point Format Example"
msgstr ""

#: ../../tutorial/las.rst:251
msgid ""
"Point format or `dataformat_id` is an integer that defines the set of "
"fixed :ref:`dimensions <dimensions>` stored for each point in a LAS file."
" All point formats specify the following dimensions as part of a point "
"record:"
msgstr ""

#: ../../tutorial/las.rst:256
msgid "Base LAS :ref:`dimensions`"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "X"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "Y"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "Z"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "Intensity"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "ReturnNumber"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "NumberOfReturns"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "ScanDirectionFlag"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "EdgeOfFlightLine"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "Classification"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "ScanAngleRank"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "UserData"
msgstr ""

#: ../../tutorial/las.rst:1
msgid "PointSourceId"
msgstr ""

#: ../../tutorial/las.rst:264
msgid ""
"Because LAS files have no built-in compression, it's important to use a "
"point format that stores the fewest fields possible that store the "
"desired data.  For example, point format 10 uses 45 more bytes per point "
"than point format zero."
msgstr ""

#: ../../tutorial/las.rst:269
msgid ""
"If one wanted remove the Red/Green/Blue fields from a LAS file (one using"
" point format 2), one could simply set the ``dataformat_id`` option to 0."
"  The ``forward`` option can also be set to carry forward all possible "
"header values from the source file to the new, smaller file."
msgstr ""

#: ../../tutorial/las.rst:293
msgid ""
"The |LASzip| storage of GPSTime and Red/Green/Blue fields with no data is"
" perfectly efficient."
msgstr ""

#: ../../tutorial/las.rst:297
msgid "Extra Dimensions"
msgstr ""

#: ../../tutorial/las.rst:299
msgid ""
"A LAS Point Format ID defines the fixed set of :ref:`dimensions "
"<dimensions>` a file must store, but programs are allowed to store extra "
"data beyond that fixed set. This feature of the format was regularized in"
" LAS 1.4 as something called \"extra bytes\" or \"extra dims\", but "
"previous versions can also store these extra per-point attributes."
msgstr ""

#: ../../tutorial/las.rst:307
msgid "Extra Dimension Example"
msgstr ""

#: ../../tutorial/las.rst:309
msgid ""
"LAS 1.4 provides for the storage of dimensions not part of the chosen "
"point format by appending them to each point record.  PDAL supports this "
"feature when writing files with the \"extra_dims\" option.  The following"
" example will store all source dimensions in the output file and place a "
"description of the dimensions that aren't part of the point format in an "
"\"extra bytes\" VLR:"
msgstr ""

#: ../../tutorial/las.rst:331
msgid "Required Header Fields"
msgstr ""

#: ../../tutorial/las.rst:333
msgid ""
"Readers of the ASPRS LAS Specification will see there are many fields "
"that softwares are required to write, with their content mandated by "
"various options and configurations in the format. PDAL does not assume "
"responsibility for writing these fields and coercing meaning from the "
"content to fit the specification.  It is the PDAL users' responsibility "
"to do so. Fields where this might matter include:"
msgstr ""

#: ../../tutorial/las.rst:340
msgid "`project_id`"
msgstr ""

#: ../../tutorial/las.rst:341
msgid "`global_encoding`"
msgstr ""

#: ../../tutorial/las.rst:342
msgid "`system_id`"
msgstr ""

#: ../../tutorial/las.rst:343
msgid "`software_id`"
msgstr ""

#: ../../tutorial/las.rst:344
msgid "`filesource_id`"
msgstr ""

#: ../../tutorial/las.rst:348
msgid "Header Fields Example"
msgstr ""

#: ../../tutorial/las.rst:350
msgid ""
"The \"forward\" option of :ref:`writers.las` is the easiest way to get "
"most of what you might want in terms of header settings copied from an "
"input to an output file upon processing. Imagine the scenario of zero'ing"
" out the classification values for an LAS file in preparation for using "
":ref:`filters.pmf` to reassign them. During this scenario, we'd like to "
"keep all of the other LAS header information, such as `Variable Length "
"Records`_, extent information, and format settings."
msgstr ""

#: ../../tutorial/las.rst:386
msgid ""
"If multiple input LAS files are being written to an output file, the "
"``forward`` option can only preserve values when they are the same in all"
" input files.  If the values differ, a default will be used (as it would "
"if the ``forward`` option weren't supplied).  You can specify specific "
"option values for output that will also override any forwarded data."
msgstr ""

#: ../../tutorial/las.rst:394
msgid "Coordinate Scaling"
msgstr ""

#: ../../tutorial/las.rst:396
msgid ""
"LAS stores coordinates as 32 bit integers. It is the user's "
"responsibility to ensure that the coordinate domain required by the data "
"in the file fits within the 32 bit integer domain.  Most coordinate "
"values have digits to the right of the decimal point that must be "
"preserved for sufficient accuracy. Using the scale factor allows for "
"integers to be interpreted as floating point values when read by "
"software."
msgstr ""

#: ../../tutorial/las.rst:403
msgid ""
"When writing data to LAS, choosing an appropriate scale factor should "
"take into account not just the maximum precision that can be accommodated"
" by the format, but the actual precision of the data.  Using a precision "
"greater than the resolution of the data collection can mislead users as "
"to the actual measurement precision of the data.  In addition, it can "
"lead to larger files when writing `compressed <Compression>`_ data with "
"|LASzip|."
msgstr ""

#: ../../tutorial/las.rst:411
msgid "Auto Offset Example"
msgstr ""

#: ../../tutorial/las.rst:413
msgid ""
"Users can allow PDAL select scale and offset values for data with the "
"``auto`` option.  This can have some detrimental effects on downstream "
"processing. ``auto`` for scale values will use the entire 32-bit integer "
"domain. This maximizes the precision available to store the data, but "
"this will have a detrimental effect on |LASzip| storage efficiency.  "
"``auto`` for offset calculation is just fine, however. When given the "
"option, choose to store |ASPRSLAS| data with an explicit scale for the X,"
" Y, and Z dimensions that represents actual expected data precision, not "
"artificial storage precision or maximal storage precision."
msgstr ""

#: ../../tutorial/las.rst:446
msgid "Compression"
msgstr ""

#: ../../tutorial/las.rst:448
msgid ""
"|LASzip| is an open source, lossless compression technique for |ASPRSLAS|"
" data. It is supported by two different software libraries, and it can be"
" used in both the C/C++ and the JavaScript execution environments.  LAZ "
"support is provided by both :ref:`readers.las` and :ref:`writers.las`.  "
"It can be enabled by setting the ``compression`` option to ``laszip``."
msgstr ""

#: ../../tutorial/las.rst:455
msgid "Compression Example"
msgstr ""

#: ../../tutorial/las.rst:457
msgid ""
"Providing a filename with a ``.laz`` extension will write compressed "
"data. Compression can be turned on explicitly as well:"
msgstr ""

#: ../../tutorial/las.rst:478
msgid "Variable Length Records"
msgstr ""

#: ../../tutorial/las.rst:480
msgid ""
"Variable Length Records, or VLRs, are binary data that the LAS format "
"supports to allow applications to store their own data. Coordinate system"
" information is one type of data stored in VLRs, and many different LAS-"
"using applications store data and metadata with this format capability. "
"PDAL allows users to access VLR information, forward it along to newly "
"written files, and create VLRs that store processing history information."
msgstr ""

#: ../../tutorial/las.rst:487
msgid "Common VLR data include:"
msgstr ""

#: ../../tutorial/las.rst:489
msgid "Coordinate system"
msgstr ""

#: ../../tutorial/las.rst:490
msgid "Metadata"
msgstr ""

#: ../../tutorial/las.rst:491
msgid "Processing history"
msgstr ""

#: ../../tutorial/las.rst:492
msgid "Indexing"
msgstr ""

#: ../../tutorial/las.rst:496
msgid ""
"There are VLRs that are defined by the specification, and they have the "
"VLR ``user_id`` of `LASF_Spec` or `LASF_Projection`. `LASF_Spec` VLRs "
"provide a description of the data beyond that available in the header.  "
"`LASF_Projection` VLRs store the spatial coordinate system of the data."
msgstr ""

#: ../../tutorial/las.rst:502
msgid ""
"For LAS 1.0-1.3, the VLR length could be no larger than 65535 bytes. "
"Version 1.4 introduced extended VLRs, stored at the end of the file, "
"which could be up to 4gb in size."
msgstr ""

#: ../../tutorial/las.rst:507
msgid "VLR Example"
msgstr ""

#: ../../tutorial/las.rst:509
msgid ""
"You can add your own VLRs to files to store processing information or "
"whatever you want by providing a JSON block via :ref:`writers.las` "
"``vlrs`` option that defines the ``user_id`` and ``data`` items for the "
"VLR. The ``data`` option must be `base64`_-encoded string output. The "
"data will be converted to binary information and stored in the VLR when "
"the file is written."
msgstr ""

#: ../../tutorial/las.rst:543
msgid "PDAL Metadata"
msgstr ""

#: ../../tutorial/las.rst:545
msgid ""
"The :ref:`writers.las` driver supports an option, ``pdal_metadata``, that"
" writes two `PDAL` VLRs to LAS files. The first is the equivalent of "
":ref:`info_command`'s ``--metadata`` output. The second is a copy of the "
"output of the ``--pipeline`` serialization option that describes all "
"stages and options of the pipeline that created the file.  These two VLRs"
" may be useful in tracking down processing history of data, allow you to "
"determine which versions of PDAL may have written a file and what filter "
"options were set when it was written, and give you the ability to store "
"metadata and other information via pipeline ``user_data`` from your own "
"applications."
msgstr ""

#: ../../tutorial/las.rst:558
msgid "Metadata Example"
msgstr ""

#: ../../tutorial/las.rst:560
msgid ""
"The pipeline used to construct the file and all of its :ref:`metadata` "
"can be written into VLRs in |ASPRSLAS| files under the `PDAL` `VLR key`_."
msgstr ""

#: ../../tutorial/las.rst:584
msgid ""
"LAS versions prior to 1.4 only support VLRs of at most 64K of "
"information. It is possible, though improbable, that the metadata or "
"pipeline stored in the VLRs will not fit in that space."
msgstr ""


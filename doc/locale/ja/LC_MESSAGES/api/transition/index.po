# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../api/transition/index.rst:4
msgid "libLAS C API to PDAL transition guide"
msgstr ""

#: ../../api/transition/index.rst
msgid "Author"
msgstr ""

#: ../../api/transition/index.rst:6
msgid "Vaclav Petras"
msgstr ""

#: ../../api/transition/index.rst
msgid "Contact"
msgstr ""

#: ../../api/transition/index.rst:7
msgid "wenzeslaus@gmail.com"
msgstr ""

#: ../../api/transition/index.rst
msgid "Date"
msgstr ""

#: ../../api/transition/index.rst:8
msgid "09/04/2015"
msgstr ""

#: ../../api/transition/index.rst:10
msgid ""
"This page shows how to port code using libLAS C API to PDAL API (which is"
" C++). The new code is not using full power of PDAL but it uses just what"
" is necessary to read content of a LAS file."
msgstr ""

#: ../../api/transition/index.rst:16
msgid "Includes"
msgstr ""

#: ../../api/transition/index.rst:18
msgid "libLAS include:"
msgstr ""

#: ../../api/transition/index.rst:24
msgid ""
"For PDAL, in addition to PDAL headers, we also include standard headers "
"which will be useful later:"
msgstr ""

#: ../../api/transition/index.rst:37
msgid "Initial steps"
msgstr ""

#: ../../api/transition/index.rst:39
msgid "Opening the dataset in libLAS:"
msgstr ""

#: ../../api/transition/index.rst:49
msgid ""
"The higher level of abstraction in PDAL requires a little bit more code "
"for the initial steps:"
msgstr ""

#: ../../api/transition/index.rst:66
msgid ""
"The PDAL code is also different in the way that we read all the data "
"right away while in libLAS we just open the file. To make use of other "
"readers supported by PDAL, see ``StageFactory`` class."
msgstr ""

#: ../../api/transition/index.rst:70
msgid ""
"The test if the file was loaded successfully, the test of the header "
"pointer was used with libLAS:"
msgstr ""

#: ../../api/transition/index.rst:79
msgid ""
"In general, PDAL will throw a ``pdal_error`` exception in case something "
"is wrong and it can't recover such in the case when the file can't be "
"opened. To handle the exceptional state by yourself, you can wrap the "
"code in ``try-catch`` block:"
msgstr ""

#: ../../api/transition/index.rst:94
msgid "Dataset properties"
msgstr ""

#: ../../api/transition/index.rst:96
msgid "We assume we defined all the following variables as ``double``."
msgstr ""

#: ../../api/transition/index.rst:98
msgid ""
"The general properties from the LAS file are retrieved from the header in"
" libLAS:"
msgstr ""

#: ../../api/transition/index.rst:116
msgid "And the same applies PDAL:"
msgstr ""

#: ../../api/transition/index.rst:134
msgid "The point record count in libLAS:"
msgstr ""

#: ../../api/transition/index.rst:140
msgid "is just point count in PDAL:"
msgstr ""

#: ../../api/transition/index.rst:146
msgid "WKT of a spatial reference system is obtained from the header in libLAS:"
msgstr ""

#: ../../api/transition/index.rst:153
msgid "In PDAL, spatial reference is part of the ``PointTable``:"
msgstr ""

#: ../../api/transition/index.rst:159
msgid ""
"Whether the time or color is supported by the LAS format, one would have "
"to determine from the format ID in libLAS:"
msgstr ""

#: ../../api/transition/index.rst:167
msgid "In PDAL, there is a convenient function for it in the header:"
msgstr ""

#: ../../api/transition/index.rst:174
msgid ""
"The presence of color, time and other dimensions can be also determined "
"with:"
msgstr ""

#: ../../api/transition/index.rst:183
msgid "Iterating over points"
msgstr ""

#: ../../api/transition/index.rst:185 ../../api/transition/index.rst:217
#: ../../api/transition/index.rst:240 ../../api/transition/index.rst:258
#: ../../api/transition/index.rst:274 ../../api/transition/index.rst:300
#: ../../api/transition/index.rst:317
msgid "libLAS:"
msgstr ""

#: ../../api/transition/index.rst:193 ../../api/transition/index.rst:247
#: ../../api/transition/index.rst:264 ../../api/transition/index.rst:283
#: ../../api/transition/index.rst:306 ../../api/transition/index.rst:328
msgid "PDAL:"
msgstr ""

#: ../../api/transition/index.rst:202
msgid "Point validity"
msgstr ""

#: ../../api/transition/index.rst:204
msgid "The correct usage of libLAS required to test point validity:"
msgstr ""

#: ../../api/transition/index.rst:210
msgid ""
"In PDAL, there is no need to do that and the caller can assume that all "
"the points provided by PDAL are valid."
msgstr ""

#: ../../api/transition/index.rst:215
msgid "Coordinates"
msgstr ""

#: ../../api/transition/index.rst:225
msgid "In PDAL, point coordinates are one of the dimensions:"
msgstr ""

#: ../../api/transition/index.rst:234
msgid ""
"Thanks to ``using namespace pdal::Dimension`` we can just write ``Id::X``"
" etc."
msgstr ""

#: ../../api/transition/index.rst:238
msgid "Returns"
msgstr ""

#: ../../api/transition/index.rst:256
msgid "Classes"
msgstr ""

#: ../../api/transition/index.rst:272
msgid "Color"
msgstr ""

#: ../../api/transition/index.rst:291
msgid ""
"For LAS format, ``hasColor()`` method of ``LasHeader`` to see if the "
"format supports RGB. However, in general, you can test use "
"``hasDim(Id::Red)``, ``hasDim(Id::Green)`` and ``hasDim(Id::Blue)`` "
"method calls on the point, to see if the color was defined."
msgstr ""

#: ../../api/transition/index.rst:298
msgid "Time"
msgstr ""

#: ../../api/transition/index.rst:315
msgid "Other point attributes"
msgstr ""

#: ../../api/transition/index.rst:341
msgid "Memory management"
msgstr ""

#: ../../api/transition/index.rst:343
msgid "In libLAS C API, we need to explicitly take care of freeing the memory:"
msgstr ""

#: ../../api/transition/index.rst:351
msgid ""
"When using C++ and PDAL, the objects created on stack free the memory "
"when they go out of scope. When using smart pointers, they will take care"
" of the memory they manage. This does not apply to special cases such as "
"``exit()`` function calls."
msgstr ""


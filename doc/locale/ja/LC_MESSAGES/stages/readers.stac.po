# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../stages/readers.stac.rst:4
msgid "readers.stac"
msgstr ""

#: ../../stages/readers.stac.rst:6
msgid ""
"`Spatio Temporal Access Catalog (STAC)`_ is a common language to describe"
" geospatial information, so it can more easily be worked with, indexed, "
"and discovered. The STAC reader will read Catalogs and Features. For "
"Catalogs, the reader will iterate through items available in the Links "
"key, creating a list of reads to accomplish."
msgstr ""

#: ../../stages/readers.stac.rst:14
msgid "Example"
msgstr ""

#: ../../stages/readers.stac.rst:43
msgid "Options"
msgstr ""

#: ../../stages/readers.stac.rst:45
msgid "filename"
msgstr ""

#: ../../stages/readers.stac.rst:45
msgid ""
"STAC endpoint, local or remote, that corresponds to a Catalog, Feature or"
" ItemCollection."
msgstr ""

#: ../../stages/readers.stac.rst:49
msgid "asset_names"
msgstr ""

#: ../../stages/readers.stac.rst:48
msgid ""
"The list of asset names that should be looked at to find the source data."
" The default is 'data'."
msgstr ""

#: ../../stages/readers.stac.rst:53
msgid "date_ranges"
msgstr ""

#: ../../stages/readers.stac.rst:52
msgid ""
"A list of date ranges to prune Features by. Example: "
"``--readers.stac.date_ranges "
"'[[\"2022-11-11T0:00:0Z\",\"2022-11-30T0:00:0Z\"],...]'``"
msgstr ""

#: ../../stages/readers.stac.rst:58
msgid "bounds"
msgstr ""

#: ../../stages/readers.stac.rst:56
msgid ""
"Bounds to prune Features by. Form: "
"``([minx,maxx],[miny,maxy],[minz,maxz])`` Example: "
"``--readers.stac.bounds '([-79.0,-74.0],[38.0,39.0])'``"
msgstr ""

#: ../../stages/readers.stac.rst:62
msgid "items"
msgstr ""

#: ../../stages/readers.stac.rst:61
msgid ""
"List of `Regular Expression`_ strings to prune STAC Item IDs by. Example:"
" ``--readers.stac.items '[\"MD_GoldenBeach_2012\", "
"\"USGS_LPC\\\\w{0,}\"]'``"
msgstr ""

#: ../../stages/readers.stac.rst:67
msgid "catalogs"
msgstr ""

#: ../../stages/readers.stac.rst:65
msgid ""
"List of `Regular Expression`_ strings to prune STAC Catalog IDs by. Root "
"catalog IDs are always included in the list. Example: "
"``--readers.stac.catalogs '[\"3dep-test\", \"USGS\"]'``"
msgstr ""

#: ../../stages/readers.stac.rst:73
msgid "collections"
msgstr ""

#: ../../stages/readers.stac.rst:70
msgid ""
"List of `Regular Expression`_ strings to prune STAC Collection IDs by. "
"This will filter by the `collections` key in a STAC Item and the `id` key"
" of the STAC Collection. Example: ``--readers.stac.collections '[\"3dep-"
"test\", \"USGS\"]'``"
msgstr ""

#: ../../stages/readers.stac.rst:78
msgid "validate_schema"
msgstr ""

#: ../../stages/readers.stac.rst:76
msgid ""
"Boolean value determining if the reader should validate the supplied STAC"
" as it's being read using JSON schema and the publicly available STAC "
"schemas and list of STAC extension schemas."
msgstr ""

#: ../../stages/readers.stac.rst:86
msgid "properties"
msgstr ""

#: ../../stages/readers.stac.rst:81
msgid ""
"A key value mapping (JSON) of properties and the desired values to prune "
"Features by. Different keys will be AND'd together, and list of values "
"will OR'd together. Example: ``--readers.stac.properties "
"'{\"pc:type\":[\"lidar\",\"sonar\"],\"pc:encoding\":\"ept\"}'`` In this "
"example, a Feature must have a `pc:type` key with values of either "
"`lidar` or `sonar`, and a `pc:encoding` key with a value of `ept`."
msgstr ""

#: ../../stages/readers.stac.rst:92
msgid "reader_args"
msgstr ""

#: ../../stages/readers.stac.rst:89
msgid ""
"A list of JSON objects with keys of reader options and the values to pass"
" through. These will be in the exact same form as a Pipeline Stage object"
" minus the filename."
msgstr ""

#: ../../stages/readers.stac.rst:92
msgid "Exmaple:"
msgstr ""

#: ../../stages/readers.stac.rst:101
msgid "catalog_schema_url"
msgstr ""

#: ../../stages/readers.stac.rst:101
msgid ""
"URL of JSON schema you'd like to use for JSON schema validation of STAC "
"Catalogs."
msgstr ""

#: ../../stages/readers.stac.rst:104
msgid "collection_schema_url"
msgstr ""

#: ../../stages/readers.stac.rst:104
msgid ""
"URL of JSON schema you'd like to use for JSON schema validation of STAC "
"Collections."
msgstr ""

#: ../../stages/readers.stac.rst:107
msgid "feature_schema_url"
msgstr ""

#: ../../stages/readers.stac.rst:107
msgid ""
"URL of JSON schema you'd like to use for JSON schema validation of STAC "
"Items/Features."
msgstr ""

#: ../../stages/readers.stac.rst:110
msgid "Metadata"
msgstr ""

#: ../../stages/readers.stac.rst:111
msgid ""
"Metadata outputs will include `ids` and `item_ids` for representings STAC"
" Feature Ids, as well as `catalog_ids` and `collection_ids` representing "
"STAC Catalogs and Collections, respectively."
msgstr ""

#: ../../stages/readers.stac.rst:172
msgid "Curl Timeouts"
msgstr ""

#: ../../stages/readers.stac.rst:173
msgid ""
"STAC reader, and PDAL as a whole, rely on curl for external requests. The"
" curl requests default to a timeout of 5s. If your requests are failing, "
"it could be because the timeout is too short. You can set `CURL_TIMEOUT` "
"in your environment to get around this."
msgstr ""

#: ../../stages/readers.stac.rst:178
msgid ""
"To debug your requests to make sure that the timeout is the problem, set "
"`VERBOSE=1` in your environment before running your PDAL task."
msgstr ""


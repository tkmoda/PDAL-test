# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../stages/filters.merge.rst:4
msgid "filters.merge"
msgstr ""

#: ../../stages/filters.merge.rst:6
msgid ""
"The **Merge Filter** combines input from multiple sources into a single "
"output. In most cases, this happens automatically on output and use of "
"the merge filter is unnecessary.  However, there may be special cases "
"where merging points prior to a particular filter or writer is necessary "
"or desirable."
msgstr ""

#: ../../stages/filters.merge.rst:12
msgid ""
"The merge filter will log a warning if its input point sets are based on "
"different spatial references.  No checks are made to ensure that points "
"from various sources being merged have similar dimensions or are "
"generally compatible."
msgstr ""

#: ../../stages/filters.merge.rst:20
msgid "Example 1"
msgstr ""

#: ../../stages/filters.merge.rst:22
msgid ""
"This pipeline will create an output file \"output.las\" that "
"contcatenates the points from \"file1\", \"file2\" and \"file3\".  Note "
"that the explicit use of the merge filter is unnecessary in this case "
"(removing the merge filter will yield the same result)."
msgstr ""

#: ../../stages/filters.merge.rst:40
msgid "Example 2"
msgstr ""

#: ../../stages/filters.merge.rst:42
msgid ""
"Here are a pair of unlikely pipelines that show one way in which a merge "
"filter might be used.  The first pipeline simply reads the input files "
"\"utm1.las\", \"utm2.las\" and \"utm3.las\".  Since the points from each "
"input set are carried separately through the pipeline, three files are "
"created as output, \"out1.las\", \"out2.las\" and \"out3.las\".  "
"\"out1.las\" contains the points in \"utm1.las\".  \"out2.las\" contains "
"the points in \"utm2.las\" and \"out3.las\" contains the points in "
"\"utm3.las\"."
msgstr ""

#: ../../stages/filters.merge.rst:59
msgid ""
"Here is the same pipeline with a merge filter added.  The merge filter "
"will combine the points in its input: \"utm1.las\" and \"utm2.las\".  "
"Then the result of the merge filter is passed to the writer along with "
"\"utm3.las\".  This results in two output files: \"out1.las\" contains "
"the points from \"utm1.las\" and \"utm2.las\", while \"out2.las\" "
"contains the points from \"utm3.las\"."
msgstr ""

#: ../../stages/filters.merge.rst:78
msgid "Options"
msgstr ""

#: ../../stages/filter_opts.rst:5
msgid "where"
msgstr ""

#: ../../stages/filter_opts.rst:2
msgid ""
"An :ref:`expression <PDAL expression>` that limits points passed to a "
"filter. Points that don't pass the expression skip the stage but are "
"available to subsequent stages in a pipeline. [Default: no filtering]"
msgstr ""

#: ../../stages/filter_opts.rst:13
msgid "where_merge"
msgstr ""

#: ../../stages/filter_opts.rst:8
msgid ""
"A strategy for merging points skipped by a '`where'` option when running "
"in standard mode. If ``true``, the skipped points are added to the first "
"point view returned by the skipped filter. If ``false``, skipped points "
"are placed in their own point view. If ``auto``, skipped points are "
"merged into the returned point view provided that only one point view is "
"returned and it has the same point count as it did when the filter was "
"run. [Default: ``auto``]"
msgstr ""


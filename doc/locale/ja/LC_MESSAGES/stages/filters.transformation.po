# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../stages/filters.transformation.rst:4
msgid "filters.transformation"
msgstr ""

#: ../../stages/filters.transformation.rst:6
msgid ""
"The transformation filter applies an arbitrary homography transformation,"
" represented as a 4x4 matrix_, to each xyz triplet."
msgstr ""

#: ../../stages/filters.transformation.rst:11
msgid ""
"The transformation filter does not apply or consider any spatial "
"reference information."
msgstr ""

#: ../../stages/filters.transformation.rst:19
msgid "Example"
msgstr ""

#: ../../stages/filters.transformation.rst:21
msgid "This example rotates the points around the z-axis while translating them."
msgstr ""

#: ../../stages/filters.transformation.rst:39
msgid "Options"
msgstr ""

#: ../../stages/filters.transformation.rst:43
msgid "invert"
msgstr ""

#: ../../stages/filters.transformation.rst:42
msgid ""
"If set to true, applies the inverse of the provided transformation "
"matrix. [Default: false]"
msgstr ""

#: ../../stages/filters.transformation.rst:48
msgid "_`matrix`"
msgstr ""

#: ../../stages/filters.transformation.rst:46
msgid ""
"A whitespace-delimited transformation matrix. The matrix is assumed to be"
" presented in row-major order. Only matrices with sixteen elements are "
"allowed."
msgstr ""

#: ../../stages/filter_opts.rst:5
msgid "where"
msgstr ""

#: ../../stages/filter_opts.rst:2
msgid ""
"An :ref:`expression <PDAL expression>` that limits points passed to a "
"filter. Points that don't pass the expression skip the stage but are "
"available to subsequent stages in a pipeline. [Default: no filtering]"
msgstr ""

#: ../../stages/filter_opts.rst:13
msgid "where_merge"
msgstr ""

#: ../../stages/filter_opts.rst:8
msgid ""
"A strategy for merging points skipped by a '`where'` option when running "
"in standard mode. If ``true``, the skipped points are added to the first "
"point view returned by the skipped filter. If ``false``, skipped points "
"are placed in their own point view. If ``auto``, skipped points are "
"merged into the returned point view provided that only one point view is "
"returned and it has the same point count as it did when the filter was "
"run. [Default: ``auto``]"
msgstr ""

#: ../../stages/filters.transformation.rst:53
msgid "Further details"
msgstr ""

#: ../../stages/filters.transformation.rst:55
msgid ""
"A full tutorial about transformation matrices is beyond the scope of this"
" documentation. Instead, we will provide a few pointers to introduce core"
" concepts, especially as pertains to PDAL's handling of the ``matrix`` "
"argument."
msgstr ""

#: ../../stages/filters.transformation.rst:59
msgid ""
"Transformations in a 3-dimensional coordinate system can be represented "
"as a homography transformation using homogeneous coordinates. This 4x4 "
"matrix can represent affine transformations describing operations like "
"translation, rotation, and scaling of coordinates.  In addition it can "
"represent perspective transformations modeling a pinhole camera."
msgstr ""

#: ../../stages/filters.transformation.rst:65
msgid ""
"The transformation filter's ``matrix`` argument is a space delimited, 16 "
"element string. This string is simply a row-major representation of the "
"4x4 matrix (i.e., first four elements correspond to the top row of the "
"transformation matrix and so on)."
msgstr ""

#: ../../stages/filters.transformation.rst:70
msgid ""
"In the event that readers are accustomed to an alternate representation "
"of the transformation matrix, we provide some simple examples in the form"
" of pure translations, rotations, and scaling, and show the corresponding"
" ``matrix`` string."
msgstr ""

#: ../../stages/filters.transformation.rst:76
msgid "Translation"
msgstr ""

#: ../../stages/filters.transformation.rst:78
msgid ""
"A pure translation by :math:`t_x`, :math:`t_y`, and :math:`t_z` in the X,"
" Y, and Z dimensions is represented by the following matrix."
msgstr ""

#: ../../stages/filters.transformation.rst:81
msgid ""
"\\begin{matrix}\n"
"    1 & 0 & 0 & t_x \\\\\n"
"    0 & 1 & 0 & t_y \\\\\n"
"    0 & 0 & 1 & t_z \\\\\n"
"    0 & 0 & 0 & 1\n"
"\\end{matrix}"
msgstr ""

#: ../../stages/filters.transformation.rst:90
msgid ""
"The JSON syntax required for such a translation is written as follows for"
" :math:`t_x=7`, :math:`t_y=8`, and :math:`t_z=9`."
msgstr ""

#: ../../stages/filters.transformation.rst:102
msgid "Scaling"
msgstr ""

#: ../../stages/filters.transformation.rst:104
msgid ""
"Scaling of coordinates is also possible using a transformation matrix. "
"The matrix shown below will scale the X coordinates by :math:`s_x`, the Y"
" coordinates by :math:`s_y`, and Z by :math:`s_z`."
msgstr ""

#: ../../stages/filters.transformation.rst:108
msgid ""
"\\begin{matrix}\n"
"    s_x &   0 &   0 & 0 \\\\\n"
"      0 & s_y &   0 & 0 \\\\\n"
"      0 &   0 & s_z & 0 \\\\\n"
"      0 &   0 &   0 & 1\n"
"\\end{matrix}"
msgstr ""

#: ../../stages/filters.transformation.rst:117
msgid ""
"We again provide an example JSON snippet to demonstrate the scaling "
"transformation. In the example, X and Y are not scaled at all (i.e., "
":math:`s_x=s_y=1`) and Z is magnified by a factor of 2 (:math:`s_z=2`)."
msgstr ""

#: ../../stages/filters.transformation.rst:131
msgid "Rotation"
msgstr ""

#: ../../stages/filters.transformation.rst:133
msgid ""
"A rotation of coordinates by :math:`\\theta` radians counter-clockwise "
"about the z-axis is accomplished with the following matrix."
msgstr ""

#: ../../stages/filters.transformation.rst:136
msgid ""
"\\begin{matrix}\n"
"    \\cos{\\theta} & -\\sin{\\theta} & 0 & 0 \\\\\n"
"    \\sin{\\theta} &  \\cos{\\theta} & 0 & 0 \\\\\n"
"               0 &             0 & 1 & 0 \\\\\n"
"               0 &             0 & 0 & 1\n"
"\\end{matrix}"
msgstr ""

#: ../../stages/filters.transformation.rst:145
msgid ""
"In JSON, a rotation of 90 degrees (:math:`\\theta=1.57` radians) takes "
"the form shown below."
msgstr ""

#: ../../stages/filters.transformation.rst:157
msgid ""
"Similarly, a rotation about the x-axis by :math:`\\theta` radians is "
"represented as"
msgstr ""

#: ../../stages/filters.transformation.rst:160
msgid ""
"\\begin{matrix}\n"
"    1 &            0 &             0 & 0 \\\\\n"
"    0 & \\cos{\\theta} & -\\sin{\\theta} & 0 \\\\\n"
"    0 & \\sin{\\theta} &  \\cos{\\theta} & 0 \\\\\n"
"    0 &            0 &             0 & 1\n"
"\\end{matrix}"
msgstr ""

#: ../../stages/filters.transformation.rst:169
msgid ""
"which takes the following form in JSON for a rotation of 45 degrees "
"(:math:`\\theta=0.785` radians)"
msgstr ""

#: ../../stages/filters.transformation.rst:180
msgid ""
"Finally, a rotation by :math:`\\theta` radians about the y-axis is "
"accomplished with the matrix"
msgstr ""

#: ../../stages/filters.transformation.rst:183
msgid ""
"\\begin{matrix}\n"
"     \\cos{\\theta} & 0 & \\sin{\\theta} & 0 \\\\\n"
"                0 & 1 &            0 & 0 \\\\\n"
"    -\\sin{\\theta} & 0 & \\cos{\\theta} & 0 \\\\\n"
"                0 & 0 &            0 & 1\n"
"\\end{matrix}"
msgstr ""

#: ../../stages/filters.transformation.rst:192
msgid ""
"and the JSON string for a rotation of 10 degrees (:math:`\\theta=0.175` "
"radians) becomes"
msgstr ""


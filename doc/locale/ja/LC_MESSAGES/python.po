# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../python.rst:5
msgid "Python"
msgstr ""

#: ../../python.rst:10
msgid ""
"PDAL provides Python support in two significant ways. First it `embeds`_ "
"Python to allow you to write Python programs that interact with data "
"using :ref:`filters.python` filter. Second, it `extends`_ Python by "
"providing an extension that Python programmers can use to leverage PDAL "
"capabilities in their own applications."
msgstr ""

#: ../../python.rst:21
msgid ""
"PDAL's Python story always revolves around `Numpy`_ support. PDAL's data "
"is provided to both the filters ands the extension as Numpy arrays."
msgstr ""

#: ../../python.rst:28
msgid "Versions"
msgstr ""

#: ../../python.rst:30
msgid ""
"PDAL supports both Python 3.5+. :ref:`integration` tests Python Linux, "
"OSX, and Windows."
msgstr ""

#: ../../python.rst:34
msgid "Embed"
msgstr ""

#: ../../python.rst:38
msgid ""
"PDAL allows users to embed Python functions inline with other "
":ref:`pipeline` processing operations. The purpose of this capability is "
"to allow users to write small programs that implement interesting actions"
" without requiring a full C++ development activity of building a PDAL "
"stage to implement it. A Python filter is an opportunity to interactively"
" and iteratively prototype a data operation without strong considerations"
" of performance or generality.  If something works well enough, maybe one"
" takes on the effort to formalize it, but that isn't necessary. PDAL's "
"embed of Python allows you to be as grimy as you need to get the job "
"done."
msgstr ""

#: ../../python.rst:50
msgid ""
"Embedding a Python function to take Z values read from a "
":ref:`readers.las` and then output them to a :ref:`writers.bpf`."
msgstr ""

#: ../../python.rst:54
msgid "Extend"
msgstr ""

#: ../../python.rst:58
msgid ""
"PDAL provides a Python `extension <https://pypi.org/project/pdal/>`_ that"
" gives users access to executing :ref:`pipeline <pipeline>` "
"instantiations and capturing the results as `Numpy`_ arrays. This mode of"
" operation is useful if you are looking to have PDAL simply act as your "
"data format and processing handler."
msgstr ""

#: ../../python.rst:65
msgid ""
"Python extension users are expected to construct their own PDAL "
":ref:`pipeline <pipeline>` using Python's ``json`` library, or whatever "
"other libraries they wish to manipulate JSON. They then feed it into the "
"extension and get back the results as `Numpy`_ arrays:"
msgstr ""

#: ../../python.rst:92
msgid "Installation"
msgstr ""

#: ../../python.rst:96
msgid ""
"The PDAL Python extension requires a working :ref:`PDAL installation "
"<download>`.  Unless you choose the Conda installation method, make sure "
"that you a current, working version of PDAL before installing the "
"extension."
msgstr ""

#: ../../python.rst:103
msgid ""
"Previous to PDAL 2.1, Python support was spread across the embedded "
"stages (:ref:`readers.numpy` and :ref:`filters.python`) which were "
"installed by PDAL itself and the PDAL extension that was installed from "
"PyPI. As of PDAL 2.1 and PDAL/python 2.3, both the embedded stages and "
"the extension are installed from PyPI."
msgstr ""

#: ../../python.rst:110
msgid "Installation Using pip"
msgstr ""

#: ../../python.rst:114
msgid "As administrator, you can install PDAL using pip:"
msgstr ""

#: ../../python.rst:122
msgid ""
"To install pip please read `here "
"<https://pip.pypa.io/en/stable/installation/>`_"
msgstr ""

#: ../../python.rst:126
msgid "Installation from Source"
msgstr ""

#: ../../python.rst:130
msgid ""
"PDAL Python support is hosted in a separate repository than PDAL itself "
"at `GitHub <https://github.com/PDAL/python>`_.  If you have a working "
"PDAL installation and a working Python installation, you can install the "
"extension using the following procedure on Unix.  The procedure on "
"Windows is similar ::"
msgstr ""

#: ../../python.rst:140
msgid "Install using Conda"
msgstr ""

#: ../../python.rst:144
msgid ""
"The PDAL Python support can also be installed using the `Conda`_ package "
"manager.  An advantage of using Conda to install the extension is that "
"Conda will install PDAL. We recommend installing PDAL and the PDAL Python"
" extension in an environment other than the base environment.  To install"
" in an existing environment, use the following ::"
msgstr ""

#: ../../python.rst:152
msgid ""
"Use the following command to install PDAL and the PDAL Python extension "
"into a new environment and activate that environment ::"
msgstr ""

#: ../../python.rst:160
msgid ""
"The official ``pdal`` and ``python-pdal`` packages reside in the conda-"
"forge channel, which can be added via ``conda config`` or manually "
"specified with the ``-c`` option, as shown in the examples above."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../development/writing-filter.rst:5
msgid "Writing a filter"
msgstr ""

#: ../../development/writing-filter.rst:7
msgid "PDAL can be extended through the development of filter functions."
msgstr ""

#: ../../development/writing-filter.rst:11
msgid ""
"For more on filters and their role in PDAL, and their lifecycle please "
"refer to :ref:`overview`."
msgstr ""

#: ../../development/writing-filter.rst:14
msgid ""
"Every filter stage in PDAL is implemented as a plugin (sometimes referred"
" to as a \"driver\"). Filters native to PDAL, such as "
":ref:`filters.ferry`, are implemented as *static* filters and are "
"statically linked into the PDAL library. Filters that require "
"extra/optional dependencies, or are external to the core PDAL codebase "
"altogether, such as :ref:`filters.python`, are implemented as *shared* "
"filters, and are built as individual shared libraries, discoverable by "
"PDAL at runtime."
msgstr ""

#: ../../development/writing-filter.rst:22
msgid ""
"In this tutorial, we will give a brief example of a filter, with notes on"
" how to make it static or shared."
msgstr ""

#: ../../development/writing-filter.rst:27
msgid "The header"
msgstr ""

#: ../../development/writing-filter.rst:29
msgid "First, we provide a full listing of the filter header."
msgstr ""

#: ../../development/writing-filter.rst:35
msgid ""
"This header should be relatively straightforward, but we will point out "
"one method that must be declared for the plugin interface to be "
"satisfied."
msgstr ""

#: ../../development/writing-filter.rst:42
msgid ""
"In many instances, you should be able to copy this header template "
"verbatim, changing only the filter class name, includes, and member "
"functions/variables as required by your implementation."
msgstr ""

#: ../../development/writing-filter.rst:47
msgid "The source"
msgstr ""

#: ../../development/writing-filter.rst:49
msgid "Again, we start with a full listing of the filter source."
msgstr ""

#: ../../development/writing-filter.rst:55
msgid ""
"For your filter to be available to PDAL at runtime, it must adhere to the"
" PDAL plugin interface. As a convenience, we provide macros to do just "
"this."
msgstr ""

#: ../../development/writing-filter.rst:58
msgid ""
"We begin by creating a ``PluginInfo`` struct containing three identifying"
" elements - the filter name, description, and a link to documentation."
msgstr ""

#: ../../development/writing-filter.rst:66
msgid ""
"PDAL requires that filter names always begin with ``filters.``, and end "
"with a string that uniquely identifies the filter. The description will "
"be displayed to users of the PDAL CLI (``pdal --drivers``).  When making "
"a shared plugin, the name of the shared library must correspond with the "
"name of the filter provided here.  The name of the generated shared "
"object must be"
msgstr ""

#: ../../development/writing-filter.rst:76
msgid ""
"Next, we pass the following to the ``CREATE_SHARED_STAGE`` macro, passing"
" in the name of the stage and the ``PluginInfo`` struct."
msgstr ""

#: ../../development/writing-filter.rst:83
msgid ""
"To create a static stage, we simply change ``CREATE_SHARED_STAGE`` to "
"``CREATE_STATC_STAGE``."
msgstr ""

#: ../../development/writing-filter.rst:86
msgid ""
"Finally, we implement a method to get the plugin name, which is primarily"
" used by the PDAL CLI when using the ``--drivers`` or ``--options`` "
"arguments."
msgstr ""

#: ../../development/writing-filter.rst:94
msgid ""
"Now that the filter has implemented the proper plugin interface, we will "
"begin to implement some methods that actually implement the filter. The "
"``addArgs()`` method is used to register and bind any provided options to"
" the stage. Here, we get the value of ``param``, if provided, else we "
"populate ``m_value`` with the default value of ``1.0``. Option names, "
"descriptions, and default values specified in ``addArgs()`` will be "
"displayed via the PDAL CLI with the ``--options`` argument."
msgstr ""

#: ../../development/writing-filter.rst:107
msgid ""
"In ``addDimensions()`` we make sure that the known ``Intensity`` "
"dimension is registered. We can also add a custom dimension, "
"``MyDimension``, which will be populated within ``run()``."
msgstr ""

#: ../../development/writing-filter.rst:116
msgid ""
"Finally, we define ``run()``, which takes as input a ``PointViewPtr`` and"
" returns a ``PointViewSet``. It is here that we can transform existing "
"dimensions, add data to new dimensions, or selectively add/remove "
"individual points."
msgstr ""

#: ../../development/writing-filter.rst:121
msgid ""
"We suggest you take a closer look at our existing filters to get an idea "
"of the power of the ``Filter`` stage and inspiration for your own "
"filters!"
msgstr ""

#: ../../development/writing-filter.rst:126
msgid "Compilation"
msgstr ""

#: ../../development/writing-filter.rst:128
msgid "Set up a ``CMakeLists.txt`` file to compile your filter against PDAL:"
msgstr ""

#: ../../development/writing-filter.rst:136
msgid ""
"CMakeLists.txt contents may vary slightly depending on your project "
"requirements, operating system, and compilter."
msgstr ""

#: ../../development/writing-filter.rst:140
msgid "Stand-alone program"
msgstr ""

#: ../../development/writing-filter.rst:142
msgid ""
"An example of a standalone program that will read a point cloud from "
"disk, apply a filter, and write it back to disk to a new file is given in"
" ``examples/filter-streamer``. This will also show how to adjust the "
"offset and scale of points in a way that is consistent with the filtering"
" method."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../development/plugins.rst:5
msgid "Writing and building a PDAL Plugin"
msgstr ""

#: ../../development/plugins.rst
msgid "Author"
msgstr ""

#: ../../development/plugins.rst:7
msgid "Andrew Bell"
msgstr ""

#: ../../development/plugins.rst
msgid "Contact"
msgstr ""

#: ../../development/plugins.rst:8
msgid "andrew.bell.ia@gmail.com"
msgstr ""

#: ../../development/plugins.rst
msgid "Date"
msgstr ""

#: ../../development/plugins.rst:9
msgid "11/09/2021"
msgstr ""

#: ../../development/plugins.rst:11
msgid ""
"A PDAL plugin is a specially-named dynamically linked library that serves"
" as a stage or a kernel (PDAL command). The PDAL program will be able to "
"use a properly-made plugin when it is placed in an appropriate location. "
"PDAL will search the following paths (relative to the current working "
"directory) for plugins: ``.``, ``./lib``, ``../lib``, ``./bin``, "
"``../bin``. You can also override the default search path by setting the "
"environment variable ``PDAL_DRIVER_PATH`` to a list of directories that "
"pdal should search for plugins."
msgstr ""

#: ../../development/plugins.rst:19
msgid "PDAL stage plugins must be named:"
msgstr ""

#: ../../development/plugins.rst:25
msgid "where ``plugin name`` is one of ``reader``, ``writer`` or ``filter``."
msgstr ""

#: ../../development/plugins.rst:27
msgid "PDAL kernel plugins must be named:"
msgstr ""

#: ../../development/plugins.rst:33
msgid ""
"See the tutorials :ref:`writing-reader`, :ref:`writing-filter` or :ref"
":`writing-writer` for step-by-step instructions on creating a PDAL stage "
"plugin. See :ref:`writing-kernel` for similar information on creating a "
"PDAL kernel plugin.  The tutorials provide a sample CMakeLists.txt that "
"can serve as a basis for building your plugin with a PDAL installation. A"
" simple macro, ``PDAL_CREATE_PLUGIN``,  is now provided with PDAL that "
"makes it even easier to build a plugin. You can use the macro by creating"
" a file called CMakeLists.txt like this:"
msgstr ""

#: ../../development/plugins.rst:55
msgid ""
"Once your plugin is built, copy it to an appropriate location so that it "
"can be found by PDAL and it should load and run.  If your plugin doesn't "
"load, Use the PDAL `--debug` option to get information about the plugin "
"loading process."
msgstr ""


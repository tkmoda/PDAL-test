# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../development/writing-writer.rst:5
msgid "Writing a writer"
msgstr ""

#: ../../development/writing-writer.rst
msgid "Authors"
msgstr ""

#: ../../development/writing-writer.rst:7
msgid "Bradley Chambers, Scott Lewis"
msgstr ""

#: ../../development/writing-writer.rst
msgid "Contact"
msgstr ""

#: ../../development/writing-writer.rst:8
msgid "brad.chambers@gmail.com"
msgstr ""

#: ../../development/writing-writer.rst
msgid "Date"
msgstr ""

#: ../../development/writing-writer.rst:9
msgid "10/26/2016"
msgstr ""

#: ../../development/writing-writer.rst:12
msgid ""
"PDAL's command-line application can be extended through the development "
"of writer functions. In this tutorial, we will give a brief example."
msgstr ""

#: ../../development/writing-writer.rst:16
msgid "The header"
msgstr ""

#: ../../development/writing-writer.rst:18
msgid "First, we provide a full listing of the writer header."
msgstr ""

#: ../../development/writing-writer.rst:24
msgid ""
"In your MyWriter class, you will declare the necessary methods and "
"variables needed to make the writer work and meet the plugin "
"specifications."
msgstr ""

#: ../../development/writing-writer.rst:32
msgid ""
"FileStreamPtr is defined to make the declaration of the stream easier to "
"manage later on."
msgstr ""

#: ../../development/writing-writer.rst:39
msgid "Every stage must return a unique name."
msgstr ""

#: ../../development/writing-writer.rst:45
msgid ""
"These methods are used during various phases of the pipeline.  There are "
"also more methods, which will not be covered in this tutorial."
msgstr ""

#: ../../development/writing-writer.rst:52
msgid ""
"These are variables our Writer will use, such as the file to write to, "
"the newline character to use, the name of the data field to use to write "
"the MyData field, precision of the double outputs, the output stream, and"
" the dimension that corresponds to the data field for easier lookup."
msgstr ""

#: ../../development/writing-writer.rst:57
msgid "As mentioned, there cen be additional configurations done as needed."
msgstr ""

#: ../../development/writing-writer.rst:61
msgid "The source"
msgstr ""

#: ../../development/writing-writer.rst:63
msgid "We will start with a full listing of the writer source."
msgstr ""

#: ../../development/writing-writer.rst:69
msgid ""
"In the writer implementation, we will use a macro defined in pdal_macros,"
" which is included in the include chain we are using."
msgstr ""

#: ../../development/writing-writer.rst:76
msgid ""
"Here we define a struct with information regarding the writer, such as "
"the name, a description, and a path to documentation.  We then use the "
"macro to create a SHARED stage, which means it will be external to the "
"main PDAL installation.  When using the macro, we specify the name of the"
" Stage and the PluginInfo struct we defined earlier."
msgstr ""

#: ../../development/writing-writer.rst:82
msgid ""
"When making a shared plugin, the name of the shared library must "
"correspond with the name of the writer provided here.  The name of the "
"generated shared object must be"
msgstr ""

#: ../../development/writing-writer.rst:95
msgid "This struct is used for helping with the FileStreamPtr for cleanup."
msgstr ""

#: ../../development/writing-writer.rst:102
msgid ""
"This method defines the arguments the writer provides and binds them to "
"private variables."
msgstr ""

#: ../../development/writing-writer.rst:109
msgid "This method initializes our file stream in preparation for writing."
msgstr ""

#: ../../development/writing-writer.rst:116
msgid ""
"The ready method is used to prepare the writer for any number of "
"PointViews that may be passed in.  In this case, we are setting the "
"precision for our double writes, looking up the dimension specified as "
"the one to write into MyData, and writing the header of the output file."
msgstr ""

#: ../../development/writing-writer.rst:126
msgid ""
"This method is the main method for writing.  In our case, we are writing "
"a very simple file, with data in the format of X:Y:Z:MyData.  We loop "
"through each index in the PointView, and for each one we take the X, Y, "
"and Z values, as well as the value for the specified MyData dimension, "
"and write this to the output file.   In particular, note the reading of "
"MyData; in our case, MyData is an integer, but the field we are reading "
"might be a double.  Converting from double to integer is done via "
"truncation, not rounding, so by adding .5 before making the conversion "
"will ensure rounding is done properly."
msgstr ""

#: ../../development/writing-writer.rst:135
msgid ""
"Note that in this case, the output format is pretty simple.  For more "
"complex outputs, you may need to generate helper methods (and possibly "
"helper classes) to help generate the proper output.  The key is reading "
"in the appropriate values from the PointView, and then writing those in "
"whatever necessary format to the output stream."
msgstr ""

#: ../../development/writing-writer.rst:146
msgid ""
"This method is called when the writing is done.  In this case, it simply "
"cleans up the output stream by resetting it."
msgstr ""

#: ../../development/writing-writer.rst:151
msgid "Compiling and Usage"
msgstr ""

#: ../../development/writing-writer.rst:152
msgid ""
"To compile this reader, we will use cmake.  Here is the CMakeLists.txt "
"file we will use for this process:"
msgstr ""

#: ../../development/writing-writer.rst:158
msgid ""
"If this file is in the directory with the MyWriter.hpp and MyWriter.cpp "
"files, simply run ``cmake .`` followed by ``make``.  This will generate a"
" file called ``libpdal_plugin_writer_mywriter.dylib``."
msgstr ""

#: ../../development/writing-writer.rst:162
msgid ""
"Put this dylib file into the directory pointed to by "
"``PDAL_DRIVER_PATH``, and then when you run ``pdal --drivers``, you will "
"see an entry for writers.mywriter."
msgstr ""

#: ../../development/writing-writer.rst:166
msgid ""
"To test the writer, we will put it into a pipeline and read in a LAS file"
" and covert it to our output format.  For this example, use "
"`interesting.las`_, and run it through `pipeline-mywriter.json`_."
msgstr ""

#: ../../development/writing-writer.rst:170
msgid ""
"If those files are in the same directory, you would just run the command "
"``pdal pipeline pipeline-mywriter.json``, and it will generate an output "
"file called output.txt, which will be in the proper format.  From there, "
"if you wanted, you could run that output file through the MyReader that "
"was created in the previous tutorial, as well."
msgstr ""


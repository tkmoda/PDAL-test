# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../workshop/manipulation/ground/ground.rst:4
msgid "Identifying ground"
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:10
msgid ""
"This exercise uses PDAL to classify ground returns using the `Simple "
"Morphological Filter (SMRF)` technique."
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:15
msgid ""
"This exercise is an adaptation of the :ref:`ground-filters` tutorial on "
"the PDAL website by Brad Chambers. You can find more detail and example "
"invocations there."
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:20
msgid "Exercise"
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:22
msgid ""
"The primary input for `Digital Terrain Model`_ generation is a point "
"cloud with ground vs. not-ground classifications. In this example, we "
"will use an algorithm provided by PDAL, the `Simple Morphological Filter`"
" technique to generate a ground surface."
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:29
msgid ""
"You can read more about the specifics of the :ref:`Simple Morphological "
"Filter (SMRF) <filters.smrf>`"
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:35
msgid "Command"
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:37
msgid ""
"Invoke the following command, substituting accordingly, in your `Conda "
"Shell`:"
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:53
msgid ""
"As we can see, the algorithm does a great job of discriminating the "
"points, but there's a few issues:"
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:60
msgid ""
"There's noise underneath the main surface that will cause us trouble when"
" we generate a terrain surface:"
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:67
msgid "Filtering"
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:69
msgid ""
"We do not yet have a satisfactory surface for generating a DTM.  When we "
"visualize the output of this ground operation, we notice there's still "
"some noise. We can stack the call to SMRF with a call to a the "
"`filters.outlier` technique we learned about in :ref:`workshop-"
"denoising`."
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:74
msgid "Let us start by removing the non-ground data to just view the ground data:"
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:96
msgid ""
"2. Now we will instead use the :ref:`translate_command` command to stack "
"the :ref:`filters.outlier` and :ref:`filters.smrf` stages:"
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:119
msgid ""
"In this invocation, we have more control over the process. First the "
"outlier filter merely classifies outliers with a ``Classification`` value"
" of 7. These outliers are then ignored during SMRF processing with the "
"``ignore`` option. Finally, we add a range filter to extract only the "
"ground returns (i.e., ``Classification`` value of 2)."
msgstr ""

#: ../../workshop/manipulation/ground/ground.rst:125
msgid "The result is a more accurate representation of the ground returns:"
msgstr ""


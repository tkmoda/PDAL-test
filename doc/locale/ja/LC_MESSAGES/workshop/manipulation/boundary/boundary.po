# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the PDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PDAL 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 23:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../workshop/manipulation/boundary/boundary.rst:2
msgid "Finding the boundary"
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:9
msgid ""
"This exercise uses PDAL to find a tight-fitting boundary of an aerial "
"scan. Printing the coordinates of the boundary for the file is quite "
"simple using a single ``pdal info`` call, but visualizing the boundary is"
" more complicated. To complete this exercise, we are going to use "
":ref:`qgis` to view the boundary, which means we must first install it on"
" our system."
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:16
msgid "Exercise"
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:20
msgid ""
"We are going to run using the Uncompahgre data in the ``./density`` "
"directory."
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:35
msgid ""
"... a giant blizzard of coordinate output scrolls across our terminal. "
"Not very useful."
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:38
msgid ""
"Instead, let's generate some kind of vector output we can visualize with "
":ref:`qgis`.  The ``pdal tindex`` is the \"tile index\" command, and it "
"outputs a vector geometry file for each point cloud file it reads. It "
"generates this boundary using the same mechanism we invoked above -- "
":ref:`filters.hexbin`. We can leverage this capability to output a "
"contiguous boundary of the ``uncompahgre.laz`` file."
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:58
msgid "Once we've run the :ref:`tindex_command`, we can now visualize our output."
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:60
msgid "Open :ref:`qgis` and select `Add Vector Layer`:"
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:65
msgid ""
"Navigate to the ``exercises/analysis/boundary`` directory and then open "
"the ``boundary.sqlite`` file:"
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:72
msgid "Notes"
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:74
msgid ""
"The PDAL boundary computation is an approximation based on a hexagon "
"tessellation. It uses the software at http://github.com/hobu/hexer to do "
"this task."
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:78
msgid ""
":ref:`filters.hexbin` can also be used by the :ref:`density_command` to "
"generate a tessellated surface. See the :ref:`density` example for steps "
"to achieve this."
msgstr ""

#: ../../workshop/manipulation/boundary/boundary.rst:82
msgid ""
"The :ref:`tindex_command` can be used to generate boundaries for large "
"collections of data. A boundary-based indexing scheme is commonly used in"
" LiDAR processing, and PDAL supports it through the ``tindex`` "
"application. You can also use this command to merge data together (query "
"across boundaries, for example)."
msgstr ""

